BINARY TREE

	Full
		Leaves have no children
		Nodes that do have children, have 2 children
	Complete
		Like binary heaps
		Fill out top to bottom, left to right
	Perfect
		Both complete and FULL
		All leaves are on the same level

	Traversals

		N = Node, L = Left, R = Right
		Preorder
			N L R
		Inorder
			L N R
		Postorder
			L R N


AVL TREES

	COURSE:
		https://www.youtube.com/watch?v=FNeL18KsWPc

	Visualized:
		https://www.cs.usfca.edu/~galles/visualization/AVLtree.html


	Threshold: used to determine when to rebalance tree

	Every node roots it's own subtree
	Has a subtree to the left and to the right

	Height:
		H: -1 (EMPTY)
		H:  0 (SINGLE NODE)
		H: max(H(L), H(R)) + 1
	
	Balance:
	
		Balance(node) = Height(Left) - Height(Right)

		Standard threshold = 1
		Goal of AVL: keep |Balance(node)| <= Threshold
	
			LEFT-HEAVY: B(n) > 0 (positive balance)
		RIGHT-HEAVY: B(n) < 0 (negative balance)
	
	Rotations:

		Rotations fix imbalance

		Left-Heavy:
			(1) Right rotation
			(2) Left-Right rotation
		Right-Heavy:
			(1) Left rotation
			(2) Right-Left rotation
	
	Insertion:

		1. Standard BST insert
		2. Fix AVL property

		imbalance(x)
			if (rightHeavy(x)) is RIGHT HEAVY
				if (rightChild is rightHeavy or balanced) {
					LR(x)
				}
				else {
					RR(y)
					LR(x)
				}

			else if (leftHeavy(x))
				if (leftChild is leftHeavy or balanced) {
					RR(x)
				}
				else {
					LR(y)
					RR(x)
				}
